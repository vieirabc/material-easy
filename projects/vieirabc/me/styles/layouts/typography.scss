@use 'sass:map';
@use 'sass:list';
@use '../../../../../node_modules/@angular/material/' as mat;

* { font-family: 16px; }

$base: (
  font-family: ('Segoe UI', Tahoma, Geneva, Verdana, sans-serif)
);

@function get-font-family() {
  @return map-get($base, font-family);
}

$map: (
  display-4: mat.define-typography-level( 8rem, 1, 400, get-font-family(), normal),
  display-3: mat.define-typography-level( 4rem, 1, 400, get-font-family(), normal),
  display-2: mat.define-typography-level( 3rem, 1, 400, get-font-family(), normal),
  display-1: mat.define-typography-level( 2rem, 1, 400, get-font-family(), normal),

  headline: mat.define-typography-level( 1.75rem, 1, 400, get-font-family(), normal),
  title: mat.define-typography-level( 1.5rem, 1, 400, get-font-family(), normal),
  subheading-2: mat.define-typography-level( 1.25rem, 1, 400, get-font-family(), normal),
  subheading-1: mat.define-typography-level( 1.125rem, 1, 400, get-font-family(), normal),

  body-1: mat.define-typography-level( 1rem, 1, 400, get-font-family(), normal),
  body-2: mat.define-typography-level( 1rem, 1, 400, get-font-family(), normal),
  caption: mat.define-typography-level( .75rem, 1, 400, get-font-family(), normal),

  button: mat.define-typography-level( .875rem, 1, 400, get-font-family(), normal),
  input: mat.define-typography-level( .875rem, 1, 400, get-font-family(), normal),
);

@function get-level($level-name, $item: null) {
  $value: map-get($map, $level-name);
  @if $item {
    @return map-get($value, $item);
  }
  @return $value;
}

/// @param { font-size } $font-size
/// @param { line-height } $line-height
/// @param { font-weight } $font-weight
/// @param { letter-spacing } $letter-spacing
@function set-level($level-name, $font-size, $line-height, $font-weight, $letter-spacing) {
  @if map-has-key($map, $level-name) {
    $value: mat.define-typography-level( $font-size, $line-height, $font-weight, get-font-family(), $letter-spacing);
    $map: map.set($map, $level-name, $value) !global;
    @return null;
  }
  @error "ERROR: #{$level-name} is not a valid Level!";
}

/// @param { map } $levels
@function set-levels( $levels ) {
  @each $level-name, $level-configs in $levels {
    @if type-of($level-configs) == list {
      $run: set-level(
        $level-name,
        list.nth($level-configs, 1), list.nth($level-configs, 2), list.nth($level-configs, 3), list.nth($level-configs, 4)
      );
    }
  }
  @return null;
}

// FONT-FAMILY

@function set-font-family($new-font-family) {
  @if type-of($new-font-family) == list {
    $base: map.set($base, font-family, $new-font-family) !global;
    $map: (
      display-4: mat.define-typography-level( 8rem, 1, 400, get-font-family(), normal),
      display-3: mat.define-typography-level( 4rem, 1, 400, get-font-family(), normal),
      display-2: mat.define-typography-level( 3rem, 1, 400, get-font-family(), normal),
      display-1: mat.define-typography-level( 2rem, 1, 400, get-font-family(), normal),

      headline: mat.define-typography-level( 1.75rem, 1, 400, get-font-family(), normal),
      title: mat.define-typography-level( 1.5rem, 1, 400, get-font-family(), normal),
      subheading-2: mat.define-typography-level( 1.25rem, 1, 400, get-font-family(), normal),
      subheading-1: mat.define-typography-level( 1.125rem, 1, 400, get-font-family(), normal),

      body-1: mat.define-typography-level( 1rem, 1, 400, get-font-family(), normal),
      body-2: mat.define-typography-level( 1rem, 1, 400, get-font-family(), normal),
      caption: mat.define-typography-level( .75rem, 1, 400, get-font-family(), normal),

      button: mat.define-typography-level( .875rem, 1, 400, get-font-family(), normal),
      input: mat.define-typography-level( .875rem, 1, 400, get-font-family(), normal),
    ) !global;
    @return null;
  }
  @error "ERROR: '#{$new-font-family}' is not a valid!\nNeed to be a list.";
}

@function get-config() {
  @return mat.define-typography-config(
    $font-family: get-font-family(),
    $display-4: get-level(display-4), $display-3: get-level(display-3), $display-2: get-level(display-2), $display-1: get-level(display-1),
    $headline: get-level(headline), $title: get-level(title), $subheading-2: get-level(subheading-2), $subheading-1: get-level(subheading-1),
    $body-1: get-level(body-1), $body-2: get-level(body-2), $caption: get-level(caption),
    $button: get-level(button), $input: get-level(input),
  );
}
