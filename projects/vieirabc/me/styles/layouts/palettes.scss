@use 'sass:map';
@use 'sass:list';
@use '../../../../../node_modules/@angular/material/' as mat;

$map: (
  primary: mat.define-palette((
    50: #f5f5f5, 100: #e9e9e9, 200: #d9d9d9, 300: #c4c4c4, 400: #9d9d9d,
    500: #7b7b7b, 600: #555555, 700: #434343, 800: #262626, 900: #000000,
    contrast: (
      50: #000000, 100: #000000, 200: #000000, 300: #000000, 400: #000000,
      500: #f5f5f5, 600: #f5f5f5, 700: #f5f5f5, 800: #f5f5f5, 900: #f5f5f5,
    ),), 700, 500, 900
  ),
  accent: mat.define-palette((
    50: #e0f4fa, 100: #b2e2f3, 200: #81ceeb, 300: #53bbe2, 400: #34adde,
    500: #1a9fd9, 600: #1492cb, 700: #0a80b8, 800: #096fa4, 900: #025083,
    contrast: (
      50: #000000, 100: #000000, 200: #000000, 300: #000000, 400: #000000,
      500: #f5f5f5, 600: #f5f5f5, 700: #f5f5f5, 800: #f5f5f5, 900: #f5f5f5,
    )
  )),
  warn: mat.define-palette(mat.$red-palette)
);

@function get-palette($palette-name) {
  @return map-get($map, $palette-name);
}

/// @param { map } $palette
@function set-palette($palette-name, $palette, $default: null, $light: null, $dark: null, $text: null) {
  @if map-has-key($map, $palette-name) {
    @if $default {
      @if $light {
        @if $dark {
          @if $text {
            $value: mat.define-palette($palette, $default, $light, $dark, $text) !global;
          }
          $value: mat.define-palette($palette, $default, $light, $dark) !global;
        }
        $value: mat.define-palette($palette, $default, $light) !global;
      }
      $value: mat.define-palette($palette, $default) !global;
    }
    @else {
      $value: mat.define-palette($palette) !global;
    }

    $map: map.set($map, $palette-name, $value) !global;
    @return null;
  }
  @error "ERROR: '#{$palette-name}' is not a valid palette-name!";
}
